На почетокот креираме репозиториум, го правиме приватен, потоа креираме локален репозиториум на компјутер со исто име како и оддалечениот репозиториум. Ги иницијализираме со командата GIT INIT, а ги поврзуваме со GIT REMOTE ADD ORIGIN и линкот од нашиот оддалечен репозиториум. Додаваме README.md датотека со NANO README.md во која се потпишуваме и правиме COMMIT со порака Initial commit која ја правиме со командата GIT COMMIT -M "Initial commit". Потоа додаваме фајл SILab1.java со командата NANO SILab1.java во која правиме COMMIT со порака Add java class со командата GIT COMMIT -M "Add java class". Ги синхронизираме сите гранки со командата GIT PUSH -U ORIGIN MASTER. Отвораме 3 гранки bug1, bug2 и bug3 со командата GIT BRANCH BUG1,2,3 соодветно. Се префрламе на гранката bug1 со GIT CHECKOUT BUG1. Грешката во циклусот за читање N броеви ја поправаме најпрво со командата NANO SILab1.java со која влегуваме во фајлот и поправаме for циклусот да биде i<n наместо i<=n. Потоа правиме COMMIT на истиот начин со порака Fix wrong loop for reading. Потоа повторно се префрламе на гранката BUG2 со GIT CHECKOUT BUG2,повторно влегуваме во фајлот, ја поправаме грешката во методот на истиот начин и правиме COMMIT со порака Fix method sumEvenNumbers. Ги синхронизираме сите гранки со командата GIT PUSH -U ORIGIN MASTER. Ја спојуваме гранката BUG2 кон MASTER со GIT MERGE BUG2.Повторно ги синхронизираме сите гранки со GIT PUSH -U ORIGIN MASTER. Се префрламе на гранката BUG3 на истиот  начин и правиме REBASE со GIT REBASE MASTER. Се префрламе на гранката MASTER на истиот начин со CHECKOUT ја спојуваме и BUG3 кон MASTER, ги синхронизираме сите гранки со GIT PUSH --ALL --FORCE и додаваме нова датотека LOGS.TXT во која ќе ги додадеме претходно ископираните логови . Додаваме уште една датотека во случајот 213087.txt и правиме последен COMMIT со порака Final commit. И на крајот ги синхронизираме сите гранки со оддалечениот репозиториум на истиот начин.